generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // یا sqlite
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  role            String     @default("customer") // admin, customer
  addresses       Address[]
  orders          Order[]
  cartItems       CartItem[]
  reviews         Review[]
  wishlistItems   Wishlist[]
  searchHistories SearchHistory[]

  accounts        Account[]
  sessions        Session[]

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  icon      String?    // Optional icon path or emoji
  parentId  String?    
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryParent")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  description   String
  price         Float
  stock         Int
  discount      Float      @default(0)
  images        String[]   // Store image URLs
  specifications Json?     // For technical specs
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems Wishlist[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1 to 5
  comment   String?
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([productId, userId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  fullName   String
  phone      String
  city       String
  state      String
  country    String
  postalCode String
  addressLine1 String
  addressLine2 String?

  isDefault  Boolean  @default(false)

  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Order {
  id          String     @id @default(cuid())
  userId      String
  addressId   String
  items       OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Float
  paymentId   String?
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id])
  address     Address     @relation(fields: [addressId], references: [id])
  payment     Payment?    @relation(fields: [paymentId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id         String   @id @default(cuid())
  method     String
  status     String
  amount     Float
  paidAt     DateTime?
  order      Order?

  createdAt  DateTime @default(now())
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  keyword   String
  searchedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
